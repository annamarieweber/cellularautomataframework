{
    "sourceFile": "gameoflife.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1639550571454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1639550571454,
            "name": "Commit-0",
            "content": "const canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\n\nconst resolution = 10;\ncanvas.width = 800;\ncanvas.height = 800;\n\nconst COLS = canvas.width / resolution;\nconst ROWS = canvas.height / resolution;\n\nclass Cell {\n  constructor() {\n    this.currentstate = Math.floor(Math.random() * 2);\n    this.total = 0;\n  }\n  setState(state) {\n    this.currentstate = state;\n    this.total += state;\n  }\n}\n\nfunction buildGrid() {\n  return new Array(COLS).fill(null)\n    .map(() => new Array(ROWS).fill(null)\n      .map(() => new Cell()));\n}\n\nlet grid = buildGrid();\n\nrequestAnimationFrame(update);\n\nfunction update() {\n  grid = nextGen(grid);\n  render(grid);\n  requestAnimationFrame(update);\n}\n\nfunction nextGen(grid) {\n  // const nextGen = grid.map(arr => [...arr]);\n  const currentGen = grid.map(arr => arr.map(cell => cell.currentstate));\n\n  for (let col = 0; col < currentGen.length; col++) {\n    for (let row = 0; row < currentGen[col].length; row++) {\n      const cell = currentGen[col][row];\n      let numNeighbours = 0;\n      for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n          if (i === 0 && j === 0) {\n            continue;\n          }\n          const x_cell = col + i;\n          const y_cell = row + j;\n\n          if (x_cell >= 0 && y_cell >= 0 && x_cell < COLS && y_cell < ROWS) {\n            const currentNeighbour = currentGen[col + i][row + j];\n            numNeighbours += currentNeighbour;\n          }\n        }\n      }\n\n      // rules\n      if (cell === 1 && numNeighbours < 2) {\n        grid[col][row].setState(0);\n      } else if (cell === 1 && numNeighbours > 3) {\n        grid[col][row].setState(0);\n      } else if (cell === 0 && numNeighbours === 3) {\n        grid[col][row].setState(1);\n      } else {\n        grid[col][row].setState(grid[col][row].currentstate);\n      }\n    }\n  }\n  return grid;\n}\n\nfunction render(grid) {\n  let maxTotal = 0;\n  for (let col = 0; col < grid.length; col++) {\n    for (let row = 0; row < grid[col].length; row++) {\n      const cell = grid[col][row];\n      if (cell.total > maxTotal) {\n        maxTotal = cell.total;\n      }\n    }\n  }\n\n  for (let col = 0; col < grid.length; col++) {\n    for (let row = 0; row < grid[col].length; row++) {\n      const cell = grid[col][row];\n\n      ctx.beginPath();\n      ctx.rect(col * resolution, row * resolution, resolution, resolution);\n      const normalised = cell.total / maxTotal;\n      const h = (1.0 - normalised) * 240\n      ctx.fillStyle = `hsl(${h}, 100%, 50%)`;\n      ctx.fill();\n      // ctx.stroke();\n    }\n  }\n}"
        }
    ]
}