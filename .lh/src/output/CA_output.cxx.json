{
    "sourceFile": "src/output/CA_output.cxx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1639711404092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639711419132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,5 +22,91 @@\n               merge(arr, l, m, r)\n \n C++ program for Merge Sort\n \n-*/\n\\ No newline at end of file\n+*/\n+\n+\n+#include <iostream>\n+#include <utility>\n+#include \"CellularAutomata.h\"\n+#include \"myutils.h\"\n+\n+// Getter function to retreive the vector  with Cellular Automata Data.\n+std::vector<std::vector<int>> CellularAutomata::get_data()\n+{\n+    std::vector<std::vector<int>> return_data;\n+    return_data.resize(_rows);\n+    for (int i = 0; i < _rows; i++)\n+    {\n+        for (int j = 0; j < _columns; j++)\n+        {\n+            return_data[i].push_back(_data[i][j]);\n+        }\n+    }\n+    return return_data;\n+}\n+\n+// Gives information on the stats of the states in the Cellular Automata.\n+void CellularAutomata::get_stats()\n+{\n+    if (_legend.empty() == false)\n+    {\n+        for(const auto &it : _legend)\n+        {   \n+            int counter = 0;\n+            for (int i = 0; i < _rows; i++)\n+            {\n+                for (int j = 0; j < _columns; j++)\n+                {\n+                    if (_data[i][j] == it.second)\n+                    {\n+                        counter++;\n+                    }\n+                }\n+            }\n+            std::cout << \"The state: \" << it.first << \" occupied \" << counter << \" cells\" << std::endl;\n+        }\n+    }\n+    else\n+    {\n+        for(const auto &it2 : _legend_density)\n+        {   \n+            int counter2 = 0;\n+            for (int i = 0; i < _rows; i++)\n+            {\n+                for (int j = 0; j < _columns; j++)\n+                {\n+                    if (_data[i][j] == it2.second.first)\n+                    {\n+                        counter2++;\n+                    }\n+                }\n+            }\n+            std::cout << \"The state: \" << it2.first << \" occupied \" << counter2 << \" cells\" << std::endl;\n+        }\n+    }\n+}\n+\n+// Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+void CellularAutomata::print()\n+{\n+    for(int i = 0; i < _rows; i++)\n+    {\n+        for(int j = 0; j < _columns; j++)\n+        {\n+            if ((i == _rows-1) && (j == _columns-1))\n+            {\n+                std::cout << _data[i][j] << \"]\";\n+            }\n+            else if ((i == 0) && (j == 0))\n+            {\n+                std::cout << \"[\" << _data[i][j] << \", \";\n+            }\n+            else\n+            {\n+                std::cout << _data[i][j] << \", \";\n+            }\n+        }\n+        std::cout << std::endl;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639713025582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,25 +2,10 @@\n   UC Berkeley - MSSE Program\n   Chem 279-B  Introduction to Software Engineering\n   Fall 2021\n \n- mergesort2.cxx  contains a function that divides the input array into two halves, \n- calls itself for the two halves, and then merges the two sorted halves. \n- merge() function is merges two halves of the array. \n- \n- Merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted.\n- \n+\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n \n-MergeSort(arr[], l,  r)\n-If r > l\n-     1. middle point to divide the array into two halves:  \n-             middle m = l+ (r-l)/2\n-     2. mergeSort for first half:   \n-             Call mergeSort(arr, l, m)\n-     3. mergeSort for second half:\n-             Call mergeSort(arr, m+1, r)\n-     4. Merge sorted subarrays:\n-              merge(arr, l, m, r)\n \n C++ program for Merge Sort\n \n */\n"
                },
                {
                    "date": 1639713037620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,12 @@\n   UC Berkeley - MSSE Program\n   Chem 279-B  Introduction to Software Engineering\n   Fall 2021\n \n-\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n+    CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n \n \n-C++ program for Merge Sort\n+C++ program for Output Services of \n \n */\n \n \n"
                },
                {
                    "date": 1639713043463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n     CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n \n \n-C++ program for Output Services of \n+C++ program for Output Services of Cellular Automata\n \n */\n \n \n"
                },
                {
                    "date": 1639713050296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,12 @@\n   UC Berkeley - MSSE Program\n   Chem 279-B  Introduction to Software Engineering\n   Fall 2021\n \n-    CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n+    CA_output.cxx: implements a getter function to \n+    retreive the vector with Cellular Automata Data \n+    that also yield information on the stats of the states in the Cellular Automata. \n+    Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n \n \n C++ program for Output Services of Cellular Automata\n \n"
                },
                {
                    "date": 1639713059782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n     CA_output.cxx: implements a getter function to \n     retreive the vector with Cellular Automata Data \n     that also yield information on the stats of the states in the Cellular Automata. \n-    Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n+    Lastly, the output is printed in the formatted matrix out.Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n \n \n C++ program for Output Services of Cellular Automata\n \n"
                },
                {
                    "date": 1639713065056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n \n     CA_output.cxx: implements a getter function to \n     retreive the vector with Cellular Automata Data \n     that also yield information on the stats of the states in the Cellular Automata. \n-    Lastly, the output is printed in the formatted matrix out.Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n+    Lastly, the output is printed in the formatted matrix out.Thus, each row will be\n+    printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n \n \n C++ program for Output Services of Cellular Automata\n \n"
                },
                {
                    "date": 1639713072641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n     CA_output.cxx: implements a getter function to \n     retreive the vector with Cellular Automata Data \n     that also yield information on the stats of the states in the Cellular Automata. \n     Lastly, the output is printed in the formatted matrix out.Thus, each row will be\n-    printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n+    printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. \n+    The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n \n \n C++ program for Output Services of Cellular Automata\n \n"
                },
                {
                    "date": 1639713098899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     CA_output.cxx: implements a getter function to \n     retreive the vector with Cellular Automata Data \n     that also yield information on the stats of the states in the Cellular Automata. \n     Lastly, the output is printed in the formatted matrix out.Thus, each row will be\n-    printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. \n+    printed with the first element of the with opening square bracket and all elements being seperated by commas. \n     The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n \n \n C++ program for Output Services of Cellular Automata\n"
                },
                {
                    "date": 1639713112891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     retreive the vector with Cellular Automata Data \n     that also yield information on the stats of the states in the Cellular Automata. \n     Lastly, the output is printed in the formatted matrix out.Thus, each row will be\n     printed with the first element of the with open square bracket and all elements being seperated by commas. \n-    The last element  is also followed by a closing square bracket and numbers.\n+    The last element is also followed by a closing square bracket and numbers.\n \n \n C++ program for Output Services of Cellular Automata\n \n"
                }
            ],
            "date": 1639711404092,
            "name": "Commit-0",
            "content": "/*\n  UC Berkeley - MSSE Program\n  Chem 279-B  Introduction to Software Engineering\n  Fall 2021\n\n mergesort2.cxx  contains a function that divides the input array into two halves, \n calls itself for the two halves, and then merges the two sorted halves. \n merge() function is merges two halves of the array. \n \n Merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted.\n \n\nMergeSort(arr[], l,  r)\nIf r > l\n     1. middle point to divide the array into two halves:  \n             middle m = l+ (r-l)/2\n     2. mergeSort for first half:   \n             Call mergeSort(arr, l, m)\n     3. mergeSort for second half:\n             Call mergeSort(arr, m+1, r)\n     4. Merge sorted subarrays:\n              merge(arr, l, m, r)\n\nC++ program for Merge Sort\n\n*/"
        }
    ]
}