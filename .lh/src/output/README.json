{
    "sourceFile": "src/output/README",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1639710140887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639710146651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n # Creator: Joyce Kim Graduate Student\n # Date Created: Dec 3, 2021\n #\n \n-This is directory where all insertion sort algorithmic implementations in  C++ are commpiled.\n+This is directory where all  sort algorithmic implementations in  C++ are commpiled.\n Tests of these math functions and procedures are in the ../tests subdirectory. These insertion sort function is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n"
                },
                {
                    "date": 1639710197221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n # Creator: Joyce Kim Graduate Student\n # Date Created: Dec 3, 2021\n #\n \n-This is directory where all  sort algorithmic implementations in  C++ are commpiled.\n+This is directory where all the output functions t implementations in  C++ are commpiled.\n Tests of these math functions and procedures are in the ../tests subdirectory. These insertion sort function is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n"
                },
                {
                    "date": 1639710203468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n # Creator: Joyce Kim Graduate Student\n # Date Created: Dec 3, 2021\n #\n \n-This is directory where all the output functions t implementations in  C++ are commpiled.\n+This is directory where all the output functions in implementations of C++ are commpiled.\n Tests of these math functions and procedures are in the ../tests subdirectory. These insertion sort function is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n"
                },
                {
                    "date": 1639710216050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n # Creator: Joyce Kim Graduate Student\n # Date Created: Dec 3, 2021\n #\n \n-This is directory where all the output functions in implementations of C++ are commpiled.\n-Tests of these math functions and procedures are in the ../tests subdirectory. These insertion sort function is also used inside programs in other src directory files.\n+This is directory where all the output functions in implementations of C++ are compiled.\n+Tests of these math functions and procedures are in the ../tests subdirectory. These function is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n"
                },
                {
                    "date": 1639710223986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n # Date Created: Dec 3, 2021\n #\n \n This is directory where all the output functions in implementations of C++ are compiled.\n-Tests of these math functions and procedures are in the ../tests subdirectory. These function is also used inside programs in other src directory files.\n+Tests of these math functions and procedures are in the ../tests subdirectory. These output function is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n"
                },
                {
                    "date": 1639710232497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n # Date Created: Dec 3, 2021\n #\n \n This is directory where all the output functions in implementations of C++ are compiled.\n-Tests of these math functions and procedures are in the ../tests subdirectory. These output function is also used inside programs in other src directory files.\n+Tests of these  functions and procedures are in the ../tests subdirectory. These output functions is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n"
                },
                {
                    "date": 1639710260780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,13 @@\n # Date Created: Dec 3, 2021\n #\n \n This is directory where all the output functions in implementations of C++ are compiled.\n-Tests of these  functions and procedures are in the ../tests subdirectory. These output functions is also used inside programs in other src directory files.\n+Tests of these output functions and procedures are in the ../tests subdirectory. \n \n+\n+These output functions is also used inside programs in other src directory files.\n+\n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n \n"
                },
                {
                    "date": 1639710267369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n This is directory where all the output functions in implementations of C++ are compiled.\n Tests of these output functions and procedures are in the ../tests subdirectory. \n \n-\n+// Getter function to retreive the vector  with Cellular Automata Data.\n These output functions is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n"
                },
                {
                    "date": 1639710280465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n This is directory where all the output functions in implementations of C++ are compiled.\n Tests of these output functions and procedures are in the ../tests subdirectory. \n \n // Getter function to retreive the vector  with Cellular Automata Data.\n+// Gives information on the stats of the states in the Cellular Automata.\n These output functions is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n"
                },
                {
                    "date": 1639710286404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n Tests of these output functions and procedures are in the ../tests subdirectory. \n \n // Getter function to retreive the vector  with Cellular Automata Data.\n // Gives information on the stats of the states in the Cellular Automata.\n+// Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\n These output functions is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n"
                },
                {
                    "date": 1639711137316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,8 @@\n \n This is directory where all the output functions in implementations of C++ are compiled.\n Tests of these output functions and procedures are in the ../tests subdirectory. \n \n-// Getter function to retreive the vector  with Cellular Automata Data.\n-// Gives information on the stats of the states in the Cellular Automata.\n-// Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n \n These output functions is also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/mergesort2/.\n"
                },
                {
                    "date": 1639711190500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,10 @@\n # Date Created: Dec 3, 2021\n #\n \n This is directory where all the output functions in implementations of C++ are compiled.\n-Tests of these output functions and procedures are in the ../tests subdirectory. \n+Tests of these output functions and procedures are in the ../tests subdirectory. These output functions is also used inside programs in other src directory files.\n \n-\n-These output functions is also used inside programs in other src directory files.\n-\n PATH ROOT_DIR/src/mergesort2/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n \n@@ -20,6 +17,7 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - mergesort2.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n-\n+\t\t - mergesort2.cxx: implements // Getter function to retreive the vector  with Cellular Automata Data.\n+// Gives information on the stats of the states in the Cellular Automata.\n+// Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711204512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,7 +17,7 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - mergesort2.cxx: implements // Getter function to retreive the vector  with Cellular Automata Data.\n+\t\t - input.cxx: implements // Getter function to retreive the vector  with Cellular Automata Data.\n // Gives information on the stats of the states in the Cellular Automata.\n // Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711224927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,7 +17,7 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - input.cxx: implements // Getter function to retreive the vector  with Cellular Automata Data.\n+\t\t - CA_output.cxx: implements // Getter function to retreive the vector  with Cellular Automata Data.\n // Gives information on the stats of the states in the Cellular Automata.\n // Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711237278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n This is directory where all the output functions in implementations of C++ are compiled.\n Tests of these output functions and procedures are in the ../tests subdirectory. These output functions is also used inside programs in other src directory files.\n \n-PATH ROOT_DIR/src/mergesort2/.\n+PATH ROOT_DIR/src/output/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n \n \t- Makefile: a makefile that can generate all objects and libraries associated with insertion sort function\n@@ -17,7 +17,7 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements // Getter function to retreive the vector  with Cellular Automata Data.\n+\t\t - CA_output.cxx: implements getter function to retreive the vector  with Cellular Automata Data.\n // Gives information on the stats of the states in the Cellular Automata.\n // Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711244941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,7 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements getter function to retreive the vector  with Cellular Automata Data.\n-// Gives information on the stats of the states in the Cellular Automata.\n-// Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\t\t - CA_output.cxx: implements getter function to retreive the vector  with Cellular Automata Data. Gives information on the stats of the states in the Cellular Automata.Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711252668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements getter function to retreive the vector  with Cellular Automata Data. Gives information on the stats of the states in the Cellular Automata.Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\t\t - CA_output.cxx: implements getter function to retreive the vector with Cellular Automata Data. Gives information on the stats of the states in the Cellular Automata.Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711268836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements getter function to retreive the vector with Cellular Automata Data. Gives information on the stats of the states in the Cellular Automata.Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data. Gives information on the stats of the states in the Cellular Automata.Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711280540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data. Gives information on the stats of the states in the Cellular Automata.Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also Gives information on the stats of the states in the Cellular Automata.Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711293064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also Gives information on the stats of the states in the Cellular Automata.Print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711301069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is print the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711322935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n"
                },
                {
                    "date": 1639711346031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row is printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket.\n+\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n"
                },
                {
                    "date": 1639713151507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,9 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements a getter function to retreive the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out to the terminal using std::cout. Thus, each row will be printed with the first element of the Cellular Automata following an opening square bracket and all elements being seperated by commas. The last element of the Cellular Automata is also followed by a closing square bracket and numbers.\n+\t\t - CA_output.cxx: CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data \n+    that also yield information on the stats of the states in the Cellular Automata. \n+    Lastly, the output is printed in the formatted matrix out. Thus, each row will be\n+    printed with the first element of the with open square bracket and all elements being seperated by commas. \n+    The last element is also followed by a closing square bracket and numbers.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639713161055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,7 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data \n-    that also yield information on the stats of the states in the Cellular Automata. \n-    Lastly, the output is printed in the formatted matrix out. Thus, each row will be\n+\t\t - CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out. Thus, each row will be\n     printed with the first element of the with open square bracket and all elements being seperated by commas. \n     The last element is also followed by a closing square bracket and numbers.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639713166632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,7 +17,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out. Thus, each row will be\n-    printed with the first element of the with open square bracket and all elements being seperated by commas. \n-    The last element is also followed by a closing square bracket and numbers.\n\\ No newline at end of file\n+\t\t - CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out. Thus, each row will be printed with the first element of the with open square bracket and all elements being seperated by commas. The last element is also followed by a closing square bracket and numbers.\n\\ No newline at end of file\n"
                }
            ],
            "date": 1639710140887,
            "name": "Commit-0",
            "content": "# for MSSE Chem 274B - Fall Semester\n# University of California, Berkeley\n# \n# Creator: Joyce Kim Graduate Student\n# Date Created: Dec 3, 2021\n#\n\nThis is directory where all insertion sort algorithmic implementations in  C++ are commpiled.\nTests of these math functions and procedures are in the ../tests subdirectory. These insertion sort function is also used inside programs in other src directory files.\n\nPATH ROOT_DIR/src/mergesort2/.\n  Files:\n\t- README: this file with a general description of the math library and objects subdirectory\n\n\t- Makefile: a makefile that can generate all objects and libraries associated with insertion sort function\n\t            (e.g. insertion sort). The make file can also clean all math objects in the ../../lib directory\n\t\t    shell> make cleanall\n\t\t    or create all the utilities objects\n\t\t    shell> make all\n\t\t\n\t\t - mergesort2.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n\n"
        }
    ]
}