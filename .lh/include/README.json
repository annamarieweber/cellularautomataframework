{
    "sourceFile": "include/README",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1639706657271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639706664547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \n # for MSSE Chem 274B - Fall Semester\n # University of California, Berkeley\n # \n-# Creator:  Usman Jamshed  Graudate Student \n+# Creator:  Usman Jamshed and Anna Weber Graudate Student \n # Date Created: Dec 3, 2021\n \n This is directory where all math algorithmic implementations in  C++ are commpiled.\n Tests of these math functions and procedures are in the ../tests subdirectory. These math functions\n"
                },
                {
                    "date": 1639706679441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,11 @@\n # for MSSE Chem 274B - Fall Semester\n # University of California, Berkeley\n # \n # Creator:  Usman Jamshed and Anna Weber Graudate Student \n-# Date Created: Dec 3, 2021\n+# Date Created: Dec 16, 2021\n \n-This is directory where all math algorithmic implementations in  C++ are commpiled.\n+This is directory where all cellular automata implementations in  C++ are commpiled.\n Tests of these math functions and procedures are in the ../tests subdirectory. These math functions\n are also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/heapsort/.\n"
                },
                {
                    "date": 1639706685524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n # \n # Creator:  Usman Jamshed and Anna Weber Graudate Student \n # Date Created: Dec 16, 2021\n \n-This is directory where all cellular automata implementations in  C++ are commpiled.\n-Tests of these math functions and procedures are in the ../tests subdirectory. These math functions\n+This is directory where all cellular automata implementations in C++ are compiled.\n+Tests of these functions and procedures are in the ../tests subdirectory. These math functions\n are also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/heapsort/.\n   Files:\n"
                },
                {
                    "date": 1639706694109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,4 +77,15 @@\n        - mergesort2.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n \n \n \n+PATH ROOT_DIR/src/quicksort/.\n+  Files:\n+\t- README: this file with a general description of the math library and objects subdirectory\n+\n+\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n+\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n+\t\t    shell> make cleanall\n+\t\t    or create all the utilities objects\n+\t\t    shell> make all\n+\n+       - quicksort.cxx: implements QuickSort that is a Divide and Conquer algorithm by choosing an element as pivot and partitions an array around the designated pivot. Thus, it will always choose the first element as a pivot,always prioritize last element as pivot, which is demonstrated in this implementation as welel as choosing a random element as pivot, and lastly prioritize median pivot. An array and an element x of array as pivot will add x at its correct position in sorted array and put all smaller elements before x, and put all greater elements after x. \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639706704980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n # Creator:  Usman Jamshed and Anna Weber Graudate Student \n # Date Created: Dec 16, 2021\n \n This is directory where all cellular automata implementations in C++ are compiled.\n-Tests of these functions and procedures are in the ../tests subdirectory. These math functions\n+Tests of these input, compute  and output functions for the cellular automata project  and procedures are in the ../tests subdirectory. These math functions\n are also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/heapsort/.\n   Files:\n@@ -87,16 +87,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \n-       - quicksort.cxx: implements QuickSort that is a Divide and Conquer algorithm by choosing an element as pivot and partitions an array around the designated pivot. Thus, it will always choose the first element as a pivot,always prioritize last element as pivot, which is demonstrated in this implementation as welel as choosing a random element as pivot, and lastly prioritize median pivot. An array and an element x of array as pivot will add x at its correct position in sorted array and put all smaller elements before x, and put all greater elements after x. \n-PATH ROOT_DIR/src/quicksort/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n-\t\t    shell> make all\n-\n        - quicksort.cxx: implements QuickSort that is a Divide and Conquer algorithm by choosing an element as pivot and partitions an array around the designated pivot. Thus, it will always choose the first element as a pivot,always prioritize last element as pivot, which is demonstrated in this implementation as welel as choosing a random element as pivot, and lastly prioritize median pivot. An array and an element x of array as pivot will add x at its correct position in sorted array and put all smaller elements before x, and put all greater elements after x. \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639706714780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n # Creator:  Usman Jamshed and Anna Weber Graudate Student \n # Date Created: Dec 16, 2021\n \n This is directory where all cellular automata implementations in C++ are compiled.\n-Tests of these input, compute  and output functions for the cellular automata project  and procedures are in the ../tests subdirectory. These math functions\n+Tests of these input, compute  and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions\n are also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/heapsort/.\n   Files:\n"
                },
                {
                    "date": 1639706730840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n # Creator:  Usman Jamshed and Anna Weber Graudate Student \n # Date Created: Dec 16, 2021\n \n This is directory where all cellular automata implementations in C++ are compiled.\n-Tests of these input, compute  and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions\n+Tests of these input, compute  and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions of the cellular automata\n are also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/heapsort/.\n   Files:\n"
                },
                {
                    "date": 1639706738968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,13 @@\n \n # for MSSE Chem 274B - Fall Semester\n # University of California, Berkeley\n # \n-# Creator:  Usman Jamshed and Anna Weber Graudate Student \n+# Creator:  Usman Jamshed and Anna Weber Graduate Student \n # Date Created: Dec 16, 2021\n \n This is directory where all cellular automata implementations in C++ are compiled.\n-Tests of these input, compute  and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions of the cellular automata\n-are also used inside programs in other src directory files.\n+Tests of these input, compute  and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions of the cellular automata are also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/heapsort/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n"
                },
                {
                    "date": 1639706745912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n This is directory where all cellular automata implementations in C++ are compiled.\n Tests of these input, compute  and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions of the cellular automata are also used inside programs in other src directory files.\n \n-PATH ROOT_DIR/src/heapsort/.\n+PATH ROOT_DIR/src/input/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n \n \t- Makefile: a makefile that can generate all objects and libraries assiciated with heapsort function\n"
                },
                {
                    "date": 1639712135742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n # Creator:  Usman Jamshed and Anna Weber Graduate Student \n # Date Created: Dec 16, 2021\n \n This is directory where all cellular automata implementations in C++ are compiled.\n-Tests of these input, compute  and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions of the cellular automata are also used inside programs in other src directory files.\n+Tests of these input, compute and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions of the cellular automata are also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/input/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n"
                },
                {
                    "date": 1639712170566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,18 +9,18 @@\n Tests of these input, compute and output functions for the cellular automata project and its procedures are in the ../tests subdirectory. These input and output functions of the cellular automata are also used inside programs in other src directory files.\n \n PATH ROOT_DIR/src/input/.\n   Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n+\t- README: this file with a general description of the input services library and objects subdirectory for the cellular automata \n \n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with heapsort function\n-\t            (e.g. heapsort). The make file can also clean all heapsort objects in the ../../lib directory\n+\t- Makefile: a makefile that can generate all objects and libraries associated with input cellular automata functions\n+\t            (e.g. cellular automata input). The make file can also clean all input cellular automata objects in the ../../lib directory\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n+\t\t\n+\t\t - CA_input.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n \n-       - heapsort.cxx: implements heap sort to compare sorting technique derived from Binary Heap data structure and is analogous to selection sort where the first element found is the minimum element where it is placed in the minimum element at the beginning. The process is repeated with the remaining elements.\n-\n     \n \n PATH ROOT_DIR/src/selectionsort/.\n   Files:\n"
                },
                {
                    "date": 1639712239935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_input.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n+\t\t - CA_input.cxx:  contains functions with a grid with some cells which may be alive or dead. It generates the next generation of cells based on these rules: live cell with less than two live neighbors dies, live cell with two or three live neighbors lives on to the next generation, live cell with more than three live neighbors dies and any dead cell with exactly three live neighbors becomes a live cell(reproduction).\n \n     \n \n PATH ROOT_DIR/src/selectionsort/.\n"
                },
                {
                    "date": 1639713177673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,72 +19,18 @@\n \t\t    shell> make all\n \t\t\n \t\t - CA_input.cxx:  contains functions with a grid with some cells which may be alive or dead. It generates the next generation of cells based on these rules: live cell with less than two live neighbors dies, live cell with two or three live neighbors lives on to the next generation, live cell with more than three live neighbors dies and any dead cell with exactly three live neighbors becomes a live cell(reproduction).\n \n-    \n+   This is directory where all the output functions in implementations of C++ are compiled.\n+Tests of these output functions and procedures are in the ../tests subdirectory. These output functions is also used inside programs in other src directory files.\n \n-PATH ROOT_DIR/src/selectionsort/.\n+PATH ROOT_DIR/src/output/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n \n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n+\t- Makefile: a makefile that can generate all objects and libraries associated with insertion sort function\n+\t            (e.g. insertion sort). The make file can also clean all math objects in the ../../lib directory\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n-\n-       - selectionsort.cxx: implements selection sort algorithm on array by repeatedly finding the minimum element from unsorted elements and placing it the beginning. it maintains two subarrays in a given array. \n- \n-\n-PATH ROOT_DIR/src/insertionsort/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n-\t\t    shell> make all\n-\n-       - insertionsort.cxx:  implements insertion sort with simple sorting algorithm that is similar to playing cards. The array is split into a sorted and an unsorted array. Values from the unsorted part are placed at the correct position in the sorted array.\n-\n-PATH ROOT_DIR/src/mergesort3/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n-\t\t    shell> make all\n-\n-       - mergesort3.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one third.\n-\n-\n-\n-\n-\n-PATH ROOT_DIR/src/mergesort2/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n-\t\t    shell> make all\n-\n-       - mergesort2.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n-\n-\n-\n-PATH ROOT_DIR/src/quicksort/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n\\ No newline at end of file\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n-\t\t    shell> make all\n-\n-       - quicksort.cxx: implements QuickSort that is a Divide and Conquer algorithm by choosing an element as pivot and partitions an array around the designated pivot. Thus, it will always choose the first element as a pivot,always prioritize last element as pivot, which is demonstrated in this implementation as welel as choosing a random element as pivot, and lastly prioritize median pivot. An array and an element x of array as pivot will add x at its correct position in sorted array and put all smaller elements before x, and put all greater elements after x. \n+\t\t\n+\t\t - CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out. Thus, each row will be printed with the first element of the with open square bracket and all elements being seperated by commas. The last element is also followed by a closing square bracket and numbers.CA_output.cxx: \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639713186635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,18 +19,72 @@\n \t\t    shell> make all\n \t\t\n \t\t - CA_input.cxx:  contains functions with a grid with some cells which may be alive or dead. It generates the next generation of cells based on these rules: live cell with less than two live neighbors dies, live cell with two or three live neighbors lives on to the next generation, live cell with more than three live neighbors dies and any dead cell with exactly three live neighbors becomes a live cell(reproduction).\n \n-   This is directory where all the output functions in implementations of C++ are compiled.\n-Tests of these output functions and procedures are in the ../tests subdirectory. These output functions is also used inside programs in other src directory files.\n+    \n \n-PATH ROOT_DIR/src/output/.\n+PATH ROOT_DIR/src/selectionsort/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n \n-\t- Makefile: a makefile that can generate all objects and libraries associated with insertion sort function\n-\t            (e.g. insertion sort). The make file can also clean all math objects in the ../../lib directory\n+\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n+\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n \t\t    shell> make cleanall\n\\ No newline at end of file\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n-\t\t\n-\t\t - CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out. Thus, each row will be printed with the first element of the with open square bracket and all elements being seperated by commas. The last element is also followed by a closing square bracket and numbers.CA_output.cxx: \n+\n+       - selectionsort.cxx: implements selection sort algorithm on array by repeatedly finding the minimum element from unsorted elements and placing it the beginning. it maintains two subarrays in a given array. \n+ \n+\n+PATH ROOT_DIR/src/insertionsort/.\n+  Files:\n+\t- README: this file with a general description of the math library and objects subdirectory\n+\n+\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n+\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n+\t\t    shell> make cleanall\n+\t\t    or create all the utilities objects\n+\t\t    shell> make all\n+\n+       - insertionsort.cxx:  implements insertion sort with simple sorting algorithm that is similar to playing cards. The array is split into a sorted and an unsorted array. Values from the unsorted part are placed at the correct position in the sorted array.\n+\n+PATH ROOT_DIR/src/mergesort3/.\n+  Files:\n+\t- README: this file with a general description of the math library and objects subdirectory\n+\n+\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n+\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n+\t\t    shell> make cleanall\n+\t\t    or create all the utilities objects\n+\t\t    shell> make all\n+\n+       - mergesort3.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one third.\n+\n+\n+\n+\n+\n+PATH ROOT_DIR/src/mergesort2/.\n+  Files:\n+\t- README: this file with a general description of the math library and objects subdirectory\n+\n+\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n+\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n+\t\t    shell> make cleanall\n+\t\t    or create all the utilities objects\n+\t\t    shell> make all\n+\n+       - mergesort2.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n+\n+\n+\n+PATH ROOT_DIR/src/quicksort/.\n+  Files:\n+\t- README: this file with a general description of the math library and objects subdirectory\n+\n+\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n+\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n+\t\t    shell> make cleanall\n+\t\t    or create all the utilities objects\n+\t\t    shell> make all\n+\n+       - quicksort.cxx: implements QuickSort that is a Divide and Conquer algorithm by choosing an element as pivot and partitions an array around the designated pivot. Thus, it will always choose the first element as a pivot,always prioritize last element as pivot, which is demonstrated in this implementation as welel as choosing a random element as pivot, and lastly prioritize median pivot. An array and an element x of array as pivot will add x at its correct position in sorted array and put all smaller elements before x, and put all greater elements after x. \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639713194677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,72 +19,15 @@\n \t\t    shell> make all\n \t\t\n \t\t - CA_input.cxx:  contains functions with a grid with some cells which may be alive or dead. It generates the next generation of cells based on these rules: live cell with less than two live neighbors dies, live cell with two or three live neighbors lives on to the next generation, live cell with more than three live neighbors dies and any dead cell with exactly three live neighbors becomes a live cell(reproduction).\n \n-    \n-\n-PATH ROOT_DIR/src/selectionsort/.\n+PATH ROOT_DIR/src/output/.\n   Files:\n \t- README: this file with a general description of the math library and objects subdirectory\n \n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n+\t- Makefile: a makefile that can generate all objects and libraries associated with insertion sort function\n+\t            (e.g. insertion sort). The make file can also clean all math objects in the ../../lib directory\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n-\n-       - selectionsort.cxx: implements selection sort algorithm on array by repeatedly finding the minimum element from unsorted elements and placing it the beginning. it maintains two subarrays in a given array. \n- \n-\n-PATH ROOT_DIR/src/insertionsort/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n-\t\t    shell> make all\n-\n-       - insertionsort.cxx:  implements insertion sort with simple sorting algorithm that is similar to playing cards. The array is split into a sorted and an unsorted array. Values from the unsorted part are placed at the correct position in the sorted array.\n-\n-PATH ROOT_DIR/src/mergesort3/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n-\t\t    shell> make all\n-\n-       - mergesort3.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one third.\n-\n-\n-\n-\n-\n-PATH ROOT_DIR/src/mergesort2/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n-\t\t    shell> make all\n-\n-       - mergesort2.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n-\n-\n-\n-PATH ROOT_DIR/src/quicksort/.\n-  Files:\n-\t- README: this file with a general description of the math library and objects subdirectory\n-\n-\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n-\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n-\t\t    shell> make cleanall\n-\t\t    or create all the utilities objects\n\\ No newline at end of file\n-\t\t    shell> make all\n-\n-       - quicksort.cxx: implements QuickSort that is a Divide and Conquer algorithm by choosing an element as pivot and partitions an array around the designated pivot. Thus, it will always choose the first element as a pivot,always prioritize last element as pivot, which is demonstrated in this implementation as welel as choosing a random element as pivot, and lastly prioritize median pivot. An array and an element x of array as pivot will add x at its correct position in sorted array and put all smaller elements before x, and put all greater elements after x. \n+\t\t\n+\t\t - CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out. Thus, each row will be printed with the first element of the with open square bracket and all elements being seperated by commas. The last element is also followed by a closing square bracket and numbers.CA_output.cxx: \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639713201738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,5 +29,5 @@\n \t\t    shell> make cleanall\n \t\t    or create all the utilities objects\n \t\t    shell> make all\n \t\t\n-\t\t - CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out. Thus, each row will be printed with the first element of the with open square bracket and all elements being seperated by commas. The last element is also followed by a closing square bracket and numbers.CA_output.cxx: \n\\ No newline at end of file\n+\t\t - CA_output.cxx: implements a getter function to ontain the vector with Cellular Automata Data that also yield information on the stats of the states in the Cellular Automata. Lastly, the output is printed in the formatted matrix out. Thus, each row will be printed with the first element of the with open square bracket and all elements being seperated by commas. The last element is also followed by a closing square bracket and numbers.\n\\ No newline at end of file\n"
                }
            ],
            "date": 1639706657271,
            "name": "Commit-0",
            "content": "\n# for MSSE Chem 274B - Fall Semester\n# University of California, Berkeley\n# \n# Creator:  Usman Jamshed  Graudate Student \n# Date Created: Dec 3, 2021\n\nThis is directory where all math algorithmic implementations in  C++ are commpiled.\nTests of these math functions and procedures are in the ../tests subdirectory. These math functions\nare also used inside programs in other src directory files.\n\nPATH ROOT_DIR/src/heapsort/.\n  Files:\n\t- README: this file with a general description of the math library and objects subdirectory\n\n\t- Makefile: a makefile that can generate all objects and libraries assiciated with heapsort function\n\t            (e.g. heapsort). The make file can also clean all heapsort objects in the ../../lib directory\n\t\t    shell> make cleanall\n\t\t    or create all the utilities objects\n\t\t    shell> make all\n\n       - heapsort.cxx: implements heap sort to compare sorting technique derived from Binary Heap data structure and is analogous to selection sort where the first element found is the minimum element where it is placed in the minimum element at the beginning. The process is repeated with the remaining elements.\n\n    \n\nPATH ROOT_DIR/src/selectionsort/.\n  Files:\n\t- README: this file with a general description of the math library and objects subdirectory\n\n\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n\t\t    shell> make cleanall\n\t\t    or create all the utilities objects\n\t\t    shell> make all\n\n       - selectionsort.cxx: implements selection sort algorithm on array by repeatedly finding the minimum element from unsorted elements and placing it the beginning. it maintains two subarrays in a given array. \n \n\nPATH ROOT_DIR/src/insertionsort/.\n  Files:\n\t- README: this file with a general description of the math library and objects subdirectory\n\n\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n\t\t    shell> make cleanall\n\t\t    or create all the utilities objects\n\t\t    shell> make all\n\n       - insertionsort.cxx:  implements insertion sort with simple sorting algorithm that is similar to playing cards. The array is split into a sorted and an unsorted array. Values from the unsorted part are placed at the correct position in the sorted array.\n\nPATH ROOT_DIR/src/mergesort3/.\n  Files:\n\t- README: this file with a general description of the math library and objects subdirectory\n\n\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n\t\t    shell> make cleanall\n\t\t    or create all the utilities objects\n\t\t    shell> make all\n\n       - mergesort3.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one third.\n\n\n\n\n\nPATH ROOT_DIR/src/mergesort2/.\n  Files:\n\t- README: this file with a general description of the math library and objects subdirectory\n\n\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n\t\t    shell> make cleanall\n\t\t    or create all the utilities objects\n\t\t    shell> make all\n\n       - mergesort2.cxx: implements merge sort algorithm recursively splitting the array into 2 parts, where it is sorted and merged. 3-way merge sort splits the array into into 3 parts. It recursively breaks down the arrays to subarrays of size one half. It divides the input array into two halves, and sorts  two halves subarrays, and then merges the two sorted halves.\n\n\n\nPATH ROOT_DIR/src/quicksort/.\n  Files:\n\t- README: this file with a general description of the math library and objects subdirectory\n\n\t- Makefile: a makefile that can generate all objects and libraries assiciated with mathematical functions\n\t            (e.g. factorial and rsapi). The make file can also clean all math objects in the ../../lib directory\n\t\t    shell> make cleanall\n\t\t    or create all the utilities objects\n\t\t    shell> make all\n\n       - quicksort.cxx: implements QuickSort that is a Divide and Conquer algorithm by choosing an element as pivot and partitions an array around the designated pivot. Thus, it will always choose the first element as a pivot,always prioritize last element as pivot, which is demonstrated in this implementation as welel as choosing a random element as pivot, and lastly prioritize median pivot. An array and an element x of array as pivot will add x at its correct position in sorted array and put all smaller elements before x, and put all greater elements after x. "
        }
    ]
}