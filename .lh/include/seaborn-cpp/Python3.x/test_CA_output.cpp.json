{
    "sourceFile": "include/seaborn-cpp/Python3.x/test_CA_output.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1639610979225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1639610979225,
            "name": "Commit-0",
            "content": "#include <iostream>\n#include <vector>\n#include <random>\n#include <iomanip>\n#include \"Seaborn.h\"\n#include <matplot/matplot.h>\n\nusing namespace matplot;\nusing namespace Seaborn;\n\nint main() {\n    int _rows = 5;\n    int _columns = 5;\n    int _num_states = 30;\n\n//2d array randomly generated with the rows, number of state and columns predetermined \n    std::random_device rd; \n    std::mt19937 gen(rd());\n    std::uniform_int_distribution<> dis(1,_num_states);\n    std::vector<std::vector<int>> _data(_rows, std::vector<int>(_columns,0));\n\n    for (auto it1 = _data.begin(); it1 != _data.end(); it1++) {\n        for (auto it2 = it1->begin(); it2 != it1->end(); it2++) {\n            *it2 = dis(gen); // dereference iterator, set the value\n            std::cout << std::setw(4) << *it2;\n        }\n        std::cout << '\\n';\n    }\n\n    //2d heatmap generation w/legend data and 2d vector data \n    void my_func(int i)\n    {\n        heatmap(_data)->normalization(matrix::color_normalization::i);\n        title(\"\");\n        auto ax = gca();\n        ax->x_axis().ticklabels(\n            { 0, 1, 2, 3});\n        ax->y_axis().ticklabels(\n            {\"empty\", \"tree\", \"fire\", \"char\"});\n        xlabel(ax, \"String States\");\n        ylabel(ax, \"Num States\");\n        float w = ax->width();\n        ax->width(w * 0.85f);\n        ax->x_origin(ax->x_origin() + w * 0.1f);\n\n    }\n\n//rendering for animation \n    grid_kws = {'width_ratios': (0.9, 0.05), 'wspace': 0.2};\n    fig, (ax, cbar_ax) = subplots(1, 2, gridspec_kw = grid_kws, figsize = (12, 8));\n    FuncAnimation(fig = fig, func = my_func, frames = 200, interval = 50, blit = False);\n\n    show();\n    return 0;\n}\n\nint main() {\n    int _rows = 5;\n    int _columns = 5;\n    int _num_states = 30;\n\n//2d array randomly generated with the rows, number of state and columns predetermined \n    std::random_device rd; \n    std::mt19937 gen(rd());\n    std::uniform_int_distribution<> dis(1,_num_states);\n    std::vector<std::vector<int>> _data(_rows, std::vector<int>(_columns,0));\n\n    for (auto it1 = _data.begin(); it1 != _data.end(); it1++) {\n        for (auto it2 = it1->begin(); it2 != it1->end(); it2++) {\n            *it2 = dis(gen); // dereference iterator, set the value\n            std::cout << std::setw(4) << *it2;\n        }\n        std::cout << '\\n';\n    }\n\n    //2d heatmap generation w/legend data and 2d vector data \n    void my_func(int i)\n    {\n        heatmap(_data)->normalization(matrix::color_normalization::i);\n        title(\"\");\n        auto ax = gca();\n        ax->x_axis().ticklabels(\n            { 0, 1, 2, 3});\n        ax->y_axis().ticklabels(\n            {\"empty\", \"tree\", \"fire\", \"char\"});\n        xlabel(ax, \"String States\");\n        ylabel(ax, \"Num States\");\n        float w = ax->width();\n        ax->width(w * 0.85f);\n        ax->x_origin(ax->x_origin() + w * 0.1f);\n\n    }\n\n//rendering for animation \n    grid_kws = {'width_ratios': (0.9, 0.05), 'wspace': 0.2};\n    fig, (ax, cbar_ax) = subplots(1, 2, gridspec_kw = grid_kws, figsize = (12, 8));\n    FuncAnimation(fig = fig, func = my_func, frames = 200, interval = 50, blit = False);\n\n    show();\n    return 0;\n}\n\n"
        }
    ]
}