{
    "sourceFile": "tests/test_CA_compute.cxx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1639714253693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639714379788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n   UC Berkeley - MSSE Program\n   Chem 279-B  Introduction to Software Engineering\n   Fall 2021\n \n-  test_heapsort.cxx makes calls to a different functions implemented in the heapsort object file.\n+  test_CA_heapsort.cxx makes calls to a different functions implemented in the heapsort object file.\n \n */\n \n #include \"CellularAutomata.h\"\n"
                },
                {
                    "date": 1639714399701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n   UC Berkeley - MSSE Program\n   Chem 279-B  Introduction to Software Engineering\n   Fall 2021\n \n-  test_CA_heapsort.cxx makes calls to a different functions implemented in the heapsort object file.\n+  test_CA_compute.cxx makes calls to a different functions implemented in the input service cellular automata object file.\n \n */\n \n #include \"CellularAutomata.h\"\n"
                }
            ],
            "date": 1639714253693,
            "name": "Commit-0",
            "content": "/*\n  UC Berkeley - MSSE Program\n  Chem 279-B  Introduction to Software Engineering\n  Fall 2021\n\n  test_heapsort.cxx makes calls to a different functions implemented in the heapsort object file.\n\n*/\n\n#include \"CellularAutomata.h\"\n#include \"myutils.h\"\n#include <iostream>\n#include <vector>\n#include <map>\n\nint main(void)\n{\n    std::cout << \"Creating Cellular Automata using Density: \" << std::endl;\n    std::map<std::string, std::pair<int, float>> test_legend_density{{\"empty\", {0, 0.1}}, {\"tree\", {1, 0.04}}, {\"fire\", {2, 0.7}}, {\"char\", {3, 0.16}}};\n    CellularAutomata Test1(10, 10, test_legend_density, \"char\", \"fire\", std::pair<int, int> {5, 5});\n    //3 steps with majority rule and moore neighborhood;\n    Test1.run(30,1,1); \n\n    // Testing the creation of a cellular automata when data is directly passed in\n    CellularAutomata Test2(10, 10, test_legend_density, \"char\", \"fire\", (std::pair<int, int>) {5, 5});\n    Test2.print();   \n\n    //3 steps with purity rule and moore neighborhood;\n    Test2.run(30,2,1); \n}"
        }
    ]
}